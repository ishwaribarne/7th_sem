import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

class HuffmanNode {
    int data;
    char c;
    HuffmanNode left;
    HuffmanNode right;
}

// comparator class helps to compare the node on the basis of one of its
// attribute. Here we will be compared on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.data - y.data;
    }
}

class main2 {
    public static void printCode(HuffmanNode root, String s) {

        if (root.left == null && root.right == null && Character.isLetter(root.c)) { // base case; if the left and right
                                                                                     // are null then its a leaf node
                                                                                     // and we print the code s
                                                                                     // generated by traversing the tree
            System.out.println(root.c + ":" + s);
            return;
        }
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);
        int n = 6;
        char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' };
        int[] charfreq = { 5, 9, 12, 13, 16, 45 };
        // creating a priority queue q. makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator());
        for (int i = 0; i < n; i++) {
            HuffmanNode hn = new HuffmanNode();
            hn.c = charArray[i];
            hn.data = charfreq[i];

            hn.left = null;
            hn.right = null;
            q.add(hn); // add functions adds the huffman node to the queue.
        }

        // create a root node
        HuffmanNode root = null;

        // Here we will extract the two minimum value from the heap each time until its
        // size reduces to 1, extract until all the nodes are extracted.
        while (q.size() > 1) {
            HuffmanNode x = q.peek(); // first min extract.
            q.poll();
            HuffmanNode y = q.peek(); // second min extract.
            q.poll();
            HuffmanNode f = new HuffmanNode(); // new node f which is equal
            f.data = x.data + y.data; // to the sum of the frequency of the two nodes assigning values to the f node.
            f.c = '-';
            f.left = x; // first extracted node as left child.
            f.right = y; // second extracted node as the right child.
            root = f; // marking the f node as the root node.

            q.add(f); // add this node to the priority-queue.
        }

        printCode(root, "");
        s.close();
    }
}
